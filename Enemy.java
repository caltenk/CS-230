

/**
 * A general enemy which moves towards the player.
 * @author Ahmed Ajaj
 * @version 2.0
 */
public abstract class Enemy extends Moveable {
    private EnemyType type;
    /** This method constructs an enemy using the constructor in the superclass.
     * @param x The initial x co-ordinate.
     * @param y The initial y co-ordinate.
     */
    public Enemy(int x, int y) {
        super(x, y);
    }

    /**
     * loads an Enemy character from a string as generated by toString().
     *
     * @param enemyData the string generated by toString().
     */
    public Enemy(String enemyData) {
        super(enemyData);
        type = EnemyType.valueOf(enemyData.split(";")[0]);
    }

    /**
     * Saves the Enemy character as a string.
     *
     * @return A string to load a copy of this Enemy character.
     */
    public String toString() {
        return super.toString() + ";-";
        //any added enemy data here
    }

    /**
     * This emthod computes whether the move the enemy wishes to make is valid.
     * @param cell references to the cell the enemy is trying to move to.
     * @return Boolean declaring if the move is valid or not.
     */
    public boolean isMoveValid(Cell cell) {
        CellType type = cell.getType();
        switch (type) {
            case WALL:
                return false;
            case WATER:
                return false;
            case FIRE:
                return false;
            case RED_DOOR:
                return false;
            case BLUE_DOOR:
                return false;
            case GREEN_DOOR:
                return false;
            case TOKEN_DOOR:
                return false;
            default:
                return true;

        }
    }

    /**
     * This method computes the next cell.
     * @param direction The direction the enemy wishes to move in.
     * @param board The board the enemy is currently on.
     * @return The next cell.
     */
    public Cell getNextCell(Direction direction, Board board) {
        return super.getNextCell(direction, board);
    }
    /**
     * This method gets the type of the enemy.
     * @return The enemy's type.
     */
    public EnemyType getType() {
        return type;
    }

    /**
     * Abstract method to calculate the direction the enemy will move in.
     * @param board The board the enemy is on.
     */
    public abstract Direction calculateDirection(Board board);
}
