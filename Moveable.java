
import javafx.scene.image.Image;

/**
 * Class represents a character which can move in the game.
 *
 * @author George Manning
 * @version 1.0
 */
public abstract class Moveable {

    protected int xCoord;
    protected int yCoord;
    protected Board board;
    protected Image image; //Hold the sprite of the character.

    /**
     * Constructor for the Moveable class (image to be set at a later point).
     *
     * @param x The inital x co-ordinate.
     * @param y The initial y co-ordinate.
     * @param image The image used to present the moveable object
     */
    public Moveable(int x, int y) {
        setPosition(x, y);
    }

    /**
     * loads a moveable character from a string as generated by toString(), used to load data
     * from persistent storage.
     *
     * @param moveableData the string generated by toString().
     */
    public Moveable(String moveableData) {
        String[] moveableObjData = moveableData.split(";");
        String[] splitData = moveableObjData[1].split("/");

        setPosition(Integer.parseInt(splitData[0]), Integer.parseInt(splitData[1]));
    }

    
    /**
     * saves the Moveable character as a string from which a copy can later be loaded using
     * the Moveable(String) constructor, used to save the moveable character to a text file.
     *
     * @return a string containing all information needed to load a copy of this moveable character.
     */
    @Override
    public String toString() {
        String moveableData = Integer.toString(xCoord) + "/" + Integer.toString(yCoord);
        return moveableData;
    }
    
    /**
     * Moves a moveable object one space in a given direction.
     * @param direction The direction to move in.
     */
    public void move(Direction direction) {
        if (direction != null) {
            switch (direction) {
                case UP:
                    this.yCoord -= 1;
                    break;
                case DOWN:
                    this.yCoord += 1;
                    break;
                case LEFT:
                    this.xCoord -= 1;
                    break;
                case RIGHT:
                    this.xCoord += 1;
                    break;
                default:
                    break; //do nothing
            }
        } else{
            System.out.println("enemy at: " + getXCoord() + ", " + getYCoord() + " :cant move");
        }
    }

    /**
     * Sets the position to a given location.
     *
     * @param x The x co-ordinate.
     * @param y The y co-ordinate.
     */
    public void setPosition(int x, int y) {
        this.xCoord = x;
        this.yCoord = y;
    }
    
    /**
     * Sets the image.
     * @param image The image to be set.
     */
    public void setImage(Image image) {
        this.image = image;
    }

    /**
     * Gets the x coord of the moveable object.
     * @return The objects x coord.
     */
    public int getXCoord() {
        return this.xCoord;
    }

    /**
     * Gets the y coord of the moveable object.
     * @return The objects y coord.
     */
    public int getYCoord() {
        return this.yCoord;
    }
    
    /**
     * Gets the image that represents the object.
     * @return The objects image.
     */
    public Image getImage() {
        return this.image;
    }

    /**
     * Gets the type of the cell that the moveable object wants to move to.
     *
     * @param direction The direction the the cell whose type is being found.
     * @param board The board the moveable object is moving on.
     * @return The cell type of the requested cell.
     */
    protected Cell getNextCell(Direction direction, Board board) {

        int x = this.xCoord;
        int y = this.yCoord;

        switch (direction) {
            case UP:
                y -= 1;
                break;
            case DOWN:
                y += 1;
                break;
            case LEFT:
                x -= 1;
                break;
            case RIGHT:
                x += 1;
                break;
            default:
                break; //do nothing
        }
        return board.getCell(x, y);
    }

    /**
     * Works out if a move is valid
     *
     * @return True is the move is valid, False otherwise
     */
    protected abstract boolean isMoveValid(Cell cell);

}
