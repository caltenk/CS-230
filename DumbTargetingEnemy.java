

/**
 * A dumb targeting enemy:
 * Enemy that always moves in a straight line towards the player,
 * regardless of obstacles.
 *
 * @author Ahmed Ajaj
 * @version 6.0
 */
public class DumbTargetingEnemy extends TargetingEnemy {

    private int xDifference;
    private int yDifference;

    /**
     * This method constructs a dumb targeting enemy.
     *
     * @param x      The initial x co-ordinate.
     * @param y      The initial y co-ordinate.
     * @param player Reference to the player.
     */
    public DumbTargetingEnemy(int x, int y, Player player) {
        super(x, y, player);
    }

    /**
     * constructs dumb targeting enemy from a string as generated by toString()
     * and the player within a level that they are targeting.
     *
     * @param dumbEnemyData the string as generated by toString().
     * @param player        the player in the level.
     */
    public DumbTargetingEnemy(String dumbEnemyData, Player player) {
        super(dumbEnemyData);
        this.player = player;
    }

    /**
     * saves the dumbTargetingEnemy character as a string.
     *
     * @return a string to load a copy of this dumbTargetingEnemy character.
     */
    @Override
    public String toString() {
        return EnemyType.DUMB_TARGETING + ";" + super.toString();
    }

    /**
     * This method calculates the difference between the x coordinates of the
     * enemy and the player.
     *
     * @return The difference between the x coordinates of the enemy and the
     * player.
     */
    public int xDifference() {
        if (player.getXCoord() < getXCoord()) {
            xDifference = getXCoord() - player.getXCoord();
        } else {
            xDifference = player.getXCoord() - getXCoord();
        }
        return xDifference;
    }

    /**
     * This method calculates the difference between the y coordinates of the
     * enemy and the player.
     *
     * @return The difference between the y coordinates of the enemy and the
     * player.
     */
    public int yDifference() {
        if (player.getYCoord() < getYCoord()) {
            yDifference = getXCoord() - player.getYCoord();
        } else {
            yDifference = player.getYCoord() - getYCoord();
        }
        return yDifference;
    }

    /**
     * This method calculates the direction the dumb targeting enemy will move
     * in regardless of the validity of the move or obstacles, dumb targeting
     * enemies will try to move toward the player in a straight line ignoring
     * any obstacles.
     *
     * @param board Reference to the board class.
     * @return The direction the enemy will move in.
     */
    public Direction calculateDirection(Board board) {
        Direction moveDirec = null;
        if (xDifference() >= yDifference()) {
            if (player.getXCoord() > getXCoord()) {
                moveDirec = Direction.RIGHT;
            } else if (player.getXCoord() < getXCoord()) {
                moveDirec = Direction.LEFT;
            } else {
                if (player.getYCoord() > getYCoord()) {
                    moveDirec = Direction.DOWN;
                } else if (player.getYCoord() < getYCoord()) {
                    moveDirec = Direction.UP;
                }
            }
        } else {
            if (player.getYCoord() > getYCoord()) {
                moveDirec = Direction.DOWN;
            } else if (player.getYCoord() < getYCoord()) {
                moveDirec = Direction.UP;
            } else {
                if (player.getXCoord() > getXCoord()) {
                    moveDirec = Direction.RIGHT;
                } else if (player.getXCoord() < getXCoord()) {
                    moveDirec = Direction.LEFT;
                }
            }
        }
        if (isMoveValid(getNextCell(moveDirec, board))) {
            return moveDirec;
        } else {
            return null; //Doesn't move if it wants to move through a wall
            // cause this guy is dumb.
        }
    }
}
